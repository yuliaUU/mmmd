datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("7728-8758")] <- "8243"
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("8242-9273")] <- "8757.5"
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("866-1617")] <- "1241.5"
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("8758-19577")] <- "14167.5"
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("9273-15970")] <- "12621.5"
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("9273-16486")] <- "12879.5"
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("Filchner")] <- ""
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("multiple, different for each station")] <- ""
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("Vestkapp-FEB")] <- ""
datain$VolumeFiltered[datain$volume_filtered_m3 %in% c("Vestkapp-JAN")] <- ""
datain$VolumeFiltered <- as.numeric(datain$VolumeFiltered)
# mesh sizes corrections
datain$mesh_size2 <- datain$mesh_size_um
datain$mesh_size2[datain$mesh_size2 %in% c('-999', '4500 and 162', '1500 - 2000 ( Ring),180 (BSD),180 (DzhOM),380 (BR)',
'4500, 20000', '320, 4500', '330, 4500')] <- NA
datain$mesh_size2[datain$mesh_size2 == "500 and 200"] <- "350"
datain$mesh_size2[datain$mesh_size2 == "335 and 100"] <- "217.5"
datain$mesh_size2[datain$mesh_size2 == "1600-4000"] <- "2800"
datain$mesh_size2[datain$mesh_size2 == "73 or 333"] <- "203"
datain$mesh_size2[datain$mesh_size2 == "20000, 10000"] <- "15000"
datain$mesh_size2[datain$mesh_size2 == "5000, 10000"] <- "7500"
datain$mesh_size2[datain$mesh_size2 == "200, 300"] <- "250"
datain$mesh_size2 <- as.numeric(datain$mesh_size2)
#Correct a typo
datain$haul_type <- factor(datain$haul_type, levels=c("Oblique", "Vertical", "Horizontal",
"horizontal and oblique", "horizontal and vertical"))
#------------New Columns definitions-------
# define mesh size type and class
datain$NetSize=NA
datain$NetSize[datain$mesh_size2 <=  1000] <- "Meso"
datain$NetSize[datain$mesh_size2 > 1000] <- "Macro"
datain$NetSize <- factor(datain$NetSize, levels = c("Meso", "Macro"))
datain$NetClass=NA
datain$NetClass[datain$mesh_size2 <= 100] <- "50"
datain$NetClass[datain$mesh_size2 > 100 & datain$mesh_size2 < 200] <- "150"
datain$NetClass[datain$mesh_size2 >= 200  & datain$mesh_size2 <= 250] <- "225"
datain$NetClass[datain$mesh_size2 > 250 & datain$mesh_size2 <= 350] <- "300"
datain$NetClass[datain$mesh_size2 > 350 & datain$mesh_size2 <= 500] <- "400"
datain$NetClass[datain$mesh_size2 > 500 & datain$mesh_size2 <= 1000] <- "750"
datain$NetClass[datain$mesh_size2 > 1000 & datain$mesh_size2 < 4500] <- "3000"
datain$NetClass[datain$mesh_size2 >= 4500 & datain$mesh_size2 <= 5000] <- "4750"
datain$NetClass[datain$mesh_size2 > 5000] <- "Big"
#Set 225 as the reference level
datain$NetClass <- factor(datain$NetClass, levels=c("225", "50", "150", "300", "400", "750", "4750", "3000", "Big"))
### netclass amd Haul type
datain$NetClassSize <- paste("NetClass", as.character(datain$NetClass), sep="")
datain$HaulType <- paste("haul_type", as.character(datain$haul_type), sep="")
# Define seasons Use the meteorological definition, conditional on South vs
# North hemisphere The tropics are a bit of a problem. Wet seasons are
# generally a Spring summer phenomenon; Dry are Autumn winter
datain$month <- as.numeric(datain$month)
datain$dec_lat <- as.numeric(datain$dec_lat)
datain$dec_lon <- as.numeric(datain$dec_lon)
datain$Season <- NA
datain$Season[(datain$month >=12 | datain$month < 3) & datain$dec_lat <= 0] <- "Summer"
datain$Season[(datain$month >= 3 & datain$month < 6) & datain$dec_lat <= 0] <- "Autumn"
datain$Season[(datain$month >= 6 & datain$month < 9) & datain$dec_lat <= 0] <- "Winter"
datain$Season[(datain$month >= 9 & datain$month < 12) & datain$dec_lat <= 0] <- "Spring"
datain$Season[(datain$month >=12 | datain$month < 3) & datain$dec_lat > 0] <- "Winter"
datain$Season[(datain$month >= 3 & datain$month < 6) & datain$dec_lat > 0] <- "Spring"
datain$Season[(datain$month >= 6 & datain$month < 9) & datain$dec_lat > 0] <- "Summer"
datain$Season[(datain$month >= 9 & datain$month < 12) & datain$dec_lat > 0] <- "Autumn"
#reference season is Spring
datain$Season <- factor(datain$Season, levels = c("Summer", "Spring", "Autumn", "Winter"))
datain$SeasonGroup <- paste("Season", as.character(datain$Season), sep="")
# Add the latitudinal class variable
datain$latclass = NA
datain$latclass[datain$dec_lat <=  -50] <- "SubAnt"
datain$latclass[datain$dec_lat >=  50] <- "SubArct"
datain$latclass[datain$dec_lat <= 23.4 & datain$dec_lat >=  -23.4] <- "Tropics"
datain$latclass[datain$dec_lat > 23.4 & datain$dec_lat < 50] <- "BorTemp"
datain$latclass[datain$dec_lat < -23.4 & datain$dec_lat > -50] <- "AusTemp"
nrow(datain)
nrow(unique(datain[c("net_standardized", "mesh_size2", "NetSize", "dec_lat", "dec_lon", "Season", "NetArea", "TowingSpeed2", "VolumeFiltered", "day_night_twilight", "day", "month", "year",  "haul_type","max_depth_m","min_depth_m")]))
datain |> select(quantity_measure) |> mutate(zeros=ifelse(quantity_measure>0,"non-zero","zero")) |>
tabyl(zeros)|> adorn_pct_formatting()
f2 <- datain |> dplyr:: select(mesh_size2) |> dplyr::filter(mesh_size2 <=1000) |>
ggplot(aes(x = mesh_size2)) +
geom_histogram(aes(y = ..count..), bins =15, color= "white",fill="cornflowerblue")+ theme_classic()+
labs(subtitle= expression("Meso:"<="1000"~ mu*m),
x=expression("mesh size"~ mu*m))+
scale_y_log10(tran="log10",expand=c(0,0))
f3 <- datain |> dplyr:: select(mesh_size2) |>  dplyr::filter(mesh_size2 >1000) |>
ggplot( aes(x = mesh_size2)) +
geom_histogram(aes(y = ..count..), bins =15, color= "white", fill="cornflowerblue")+ theme_classic()+
labs(subtitle= expression("Macro:">"1000"~ mu*m),
x=expression("mesh size"~ mu*m))+
scale_y_log10(tran="log10",expand=c(0,0))
cowplot::plot_grid(f2,f3)
library(flextable)
tbl<- datain |>
mutate(
NetClass=as.character(NetClass),
NetClass=ifelse(NetClass=="225","225 (reference group)", NetClass),
NetClass = factor(NetClass, levels = c("50", '150', '225 (reference group)', '300', '400', '750', '3000', '4750', 'Big', "-")
)) |>
group_by(NetClass) |> tally() |>
mutate(freq = round(100 * n / sum(n), 1),
class = c(rep("Meso\n\u2264 1000 \U00B5m", 6), rep("Macro\n>1000 \U00B5m", 3), "No mesh size"))  |>
dplyr::rename("%" = "freq") |>
dplyr::select(class, everything()) |>
mutate(`Number of records (%)`=paste0(n," (",`%`,"%)")) |>
select(-n,-`%`) |>
mutate(`Mesh sizes, μm`=case_when(
NetClass=="50"~"\u2264 100",
NetClass=="150"~"100-200",
NetClass=="225 (reference group)"~"200-250",
NetClass=="300"~"250-350",
NetClass=="400"~"350-500",
NetClass=="750"~"500-1000",
NetClass=="3000"~"1000-3000",
NetClass=="4750"~"4500-5000",
NetClass=="Big"~"\u2265 5000"
)) |>
rename(Class=class, `Net Class, μm`=NetClass) |>
mutate(across(everything(), ~ replace_na(.x, "-"))) |>
group_by(Class) |>
mutate(is_last_val_in_group = row_number() == max(row_number())) |>
ungroup() |> mutate(is_last_val_in_group=ifelse(row_number()==n(),FALSE,is_last_val_in_group)) |>
flextable(col_keys = c('Class', 'Net Class, μm','Mesh sizes, μm' ,'Number of records (%)')) |>
merge_v(j = c("Class")) |>
valign(j = 1, valign = "top", part = "all") |>
bold(j = 1, bold = TRUE, part = "all") |>
bold(bold = TRUE, part = "header") |>
set_caption("Distribution of various net classes in the Mesopleagic Database") |>
padding (padding = 0, part = "all") |>
hline(i = ~is_last_val_in_group == TRUE, border = officer::fp_border( width = 0.5))  |>
autofit()
tbl
#print(tbl, "docx")
datain <- datain |> filter(quantity_measure > 0) |> filter(!is.na(quantity_measure)) |> filter(!is.na(NetSize))
nrow(datain |> filter(NetSize=="Meso"))
datain |> tabyl(phylum,NetClass)  |> #adorn_pct_formatting() |>
flextable()
datain |> filter(quantity_measure > 0) |> filter(!is.na(quantity_measure)) |> filter(!is.na(NetSize)) |> filter(!is.na(phylum)) |>
mutate(NetSize = factor(NetSize),
NetSize = relevel(NetSize, "Meso")) |>
ggplot( aes(x = log10(quantity_measure), fill = NetSize)) +
theme_classic() +
geom_histogram(bins = 30,
position = 'identity',
alpha = 0.7) +
scale_fill_manual(values = c( "blue","grey30")) +
theme(
legend.position = "top",
plot.title = element_text(
hjust = 0.5,
size = 12,
face = "bold",
color = "black"
)
) +
theme(
axis.text.y = element_text(
angle = 0,
size = 8,
face = "bold",
color = "black"
),
axis.text.x = element_text(
angle = 0,
size = 8,
face = "bold",
color = "black"
),
axis.title.y = element_text(size = 12, face = "bold", color =
"black"),
axis.title.x = element_text(size = 12, face = "bold", color =
"black")
) +
theme(
strip.text.x = element_text(size = 12, face = "bold"),
strip.text.y = element_text(size = 12, face = "bold"),
strip.background = element_blank()
) +
facet_wrap( ~ phylum, ncol = 4,  scales = 'free') +
labs(y = "count", x = "log(abundance, ind/m^3)", fill = "Net Size")
class_dt <-  datain  |>
mutate(
class = ifelse(is.na(class) == TRUE, "phylum-level", class),
phylum = as.factor(phylum),
class = as.factor(class)
) |> dplyr::select(phylum, class, NetSize) #  |>
class_dt_meso <- class_dt |>
dplyr::filter(NetSize == "Meso") |> dplyr::select(-NetSize) |>
dplyr::group_by(phylum, class) |>
count() |>
group_by(phylum) |>
mutate(freq_meso = round( 100*n / sum(n),1)) |>
rename("n_meso" ='n')
class_dt_macro <- class_dt |>
dplyr::filter(NetSize == "Macro") |> dplyr::select(-NetSize) |>
group_by(phylum, class) |> tally() |>
group_by(phylum) |>
mutate(freq_macro = round(100 * n / sum(n), 1)) |>
dplyr::rename("n_macro" =  'n')
class_tbl <-  full_join(class_dt_meso, class_dt_macro, by = c("phylum", 'class')) |> ungroup()
typology <- data.frame(
col_keys = c( "phylum",     "class", "n_meso","freq_meso",
"n_macro", "freq_macro"),
#  type = c("double", "double", "double",     "double", "factor"),
what = c("Phylum","Class","Meso","Meso","Macro","Macro"),
measure = c("Phylum","Class", "N", "%", "N", "%"),
stringsAsFactors = FALSE )
tbl2<-class_tbl |>
filter(phylum %notin% c("Porifera", "Platyhelminthes", "Phoronida", "Nemertea", "Nematoda", "Hemichordata", "Brachiopoda", "Bryozoa")) |>
group_by(phylum) |>
mutate(class=factor(class), class=fct_relevel(class, "phylum-level",after = 0)) |>
arrange(phylum, class) |>
mutate(is_last_val_in_group = row_number() == max(row_number())) |>
ungroup() |>
mutate(is_last_val_in_group=ifelse(row_number()==n(),FALSE,is_last_val_in_group)) |>
flextable(col_keys=c("phylum","class","n_meso","freq_meso","n_macro","freq_macro")) |>
set_header_df(mapping = typology, key = "col_keys" ) |>
merge_h( part = "header") |>
merge_v( part = "header") |>
merge_v(j=c("phylum")) |>
valign(j = 1, valign = "top", part = "body") |>
bold(j = 1, bold = TRUE, part = "body") |>
bold(bold = TRUE, part = "header") |>
set_caption("Number of entries, n, (with percent, %) for 19 Phyla from the mesopelagic dataset groupped by organisms' class and net size (Meso and Macro)") |>
theme_booktabs() |>
fix_border_issues(part = "all") |>
#line_spacing( space = 0.5, part = "body") |>
colformat_double(na_str = "-") |>
colformat_int(na_str = "-")|>
padding (padding = 0, part = "all") |>
hline(i = ~is_last_val_in_group == TRUE, border = officer::fp_border( width = 0.5))  |>
autofit()
tbl2
#print(tbl2, "docx")
order_tbl <- datain |> filter(NetSize=="Meso") |>
filter( phylum %in% c("Annelida","Chaetognatha","Mollusca","Chordata","Cnidaria","Arthropoda" )) |>
dplyr::select(phylum, class, order) |>
drop_na(class) |>
group_by(phylum, class, order) |> count()  |>
group_by(phylum, class) |>
mutate(freq = round(100 * n / sum(n), 1)) |>
ungroup() |>
arrange(phylum, class, n)|>
mutate(across(everything(), ~ replace_na(.x, "Class-level")))
tbl3<- order_tbl |>
# mutate(across(everything(), ~ replace_na(.x, "Class-level"))) |>
# filter(Class %in% c("Polychaeta", "Sagittoidea","Hydrozoa",
#                     "Gastropoda","Appendicularia","Thaliacea","Actinopterygii",
#                     "Hexanauplia","Malacostraca", "Ostracoda") | Phylum == "Echinodermata") |>
group_by(phylum,class) |>
mutate(order=factor(order), order=fct_relevel(order, "class-level",after = 0)) |>
arrange(phylum, class, order) |>
mutate(is_last_val_in_group = row_number() == max(row_number())) |>
ungroup() |>
mutate(is_last_val_in_group=ifelse(row_number()==n(),FALSE,is_last_val_in_group)) |>
flextable(col_keys =c("phylum","class","order","n","freq")) |>
merge_v(j = c("phylum", "class"), part = "body") |>
valign(j = c("phylum", "class"),
valign = "top",
part = "body") |>
bold(j = c("phylum", "class"),
bold = TRUE,
part = "body") |>
bold(bold = TRUE, part = "header") |>
set_header_labels(n = "N", freq = "%", phylum="Phylum",class="Class", order="Order") |>
set_caption(
"Number of entries, n, (with percent, %) for 19 Phyla from the mesopelagic dataset groupped by organisms' class and net size (Meso and Macro)"
) |>
theme_booktabs() |>
bold(bold = TRUE, part = "header") |>
fix_border_issues(part = "all") |>
padding (padding = 0, part = "all") |>
hline(i = ~is_last_val_in_group == TRUE, border = officer::fp_border( width = 0.5))  |>
autofit()
tbl3
#print(tbl3, "docx")
datain$Taxa = NA
datain$Taxa[datain$phylum == "Ctenophora"] <- "Ctenophora" # Ctenophora phylum+
datain$Taxa[datain$phylum == "Echinodermata"] <- "Echinodermata" # Echinodermata phylum+
datain$Taxa[datain$class == "Polychaeta"] <- "Polychaeta"  #Annelida:class Polychaeta +
datain$Taxa[datain$class == "Bivalvia"] <- "Bivalvia"        # Mollusca:class Bivalvia +
datain$Taxa[datain$class == "Cephalopoda"] <- "Cephalopoda"  # Mollusca:class Cephalopoda +
datain$Taxa[datain$class == "Gastropoda"] <- "Gastropoda"    # Mollusca:class Gastropoda +
#datain$Taxa[datain$Phylum == "Chaetognatha"] <- "Chaetognatha"   # Chaetognatha +
datain$Taxa[datain$order == "Phragmophora"] <- "Phragmophora"   # Chaetognatha: order Sagittoidea +
datain$Taxa[datain$order == "Aphragmophora"] <- "Aphragmophora" # Chaetognatha:order Sagittoidea +
datain$Taxa[datain$class == "Ostracoda"] <- "Ostracoda"          # Arthropoda: class Ostracoda   +
datain$Taxa[datain$order == "Calanoida"] <- "Calanoida"          # Arthropoda: Copepoda +
datain$Taxa[datain$order == "Cyclopoida"] <- "Cyclopoida"        # Arthropoda: Copepoda +
datain$Taxa[datain$order == "Harpacticoida"] <- "Harpacticoida"  # Arthropoda: Copepoda +
datain$Taxa[datain$order == "Mormonilloida"] <- "Mormonilloida"  # Arthropoda: Copepoda +
datain$Taxa[datain$order == "Euphausiacea"] <- "Euphausiacea" # Arthropoda: Malacostraca +
datain$Taxa[datain$order == "Amphipoda"] <- "Amphipoda"       # Arthropoda: Malacostraca +
datain$Taxa[datain$order == "Decapoda"] <- "Decapoda"         # Arthropoda: Malacostraca +
datain$Taxa[datain$order == "Isopoda"] <- "Isopoda"           # Arthropoda: Malacostraca +
datain$Taxa[datain$order == "Mysida"] <- "Mysida"             # Arthropoda: Malacostraca +
datain$Taxa[datain$class == "Appendicularia"] <- "Appendicularia" # Chordata: Appendicularia +
datain$Taxa[datain$class == "Thaliacea"] <- "Thaliacea"           # Chordata: Thaliacea  +
#datain$Taxa[datain$Order == "Salpida"] <- "Salpida"              # Chordata: Thaliacea  not enough other stuff to split it
datain$Taxa[datain$class == "Teleostei"] <- "Teleostei" # Chordata: Actinopterygii +
datain$Taxa[datain$order == "Siphonophorae"] <- "Siphonophorae"  # Cnidaria: Hydrozoa +
datain$Taxa[datain$order == "Narcomedusae"] <- "Narcomedusae"    # Cnidaria: Hydrozoa +
datain$Taxa[datain$order == "Trachymedusae"] <- "Trachymedusae"  # Cnidaria: Hydrozoa +
# save filtered file
#write_csv(datain,here::here("data/data_calib_abun.csv"))
datain |> tabyl(Taxa) |> adorn_pct_formatting()
#-------------------- Mesh size only -------------------
temp <- datain |> drop_na(NetClass) |>
mutate(quantity_measure = as.numeric(quantity_measure)) |>
dplyr::filter(NetSize=="Meso") |>
dplyr::filter(quantity_measure >0)
# taxa for model y ~ NetClass + latclass
taxa_list <- temp |> drop_na(Taxa) |> dplyr::distinct(Taxa) |> dplyr::pull()
Net_accum <- data.frame()
for (i in seq_along(taxa_list)){
taxa_dt <- temp |> dplyr::filter(Taxa==taxa_list[i])
if (taxa_list[i] == "Narcomedusae" || taxa_list[i] == "Cephalopoda" || taxa_list[i] == "Bivalvia"){
calibmodel <- glm(log10(quantity_measure) ~ NetClass, family="gaussian", data=taxa_dt)
} else {
calibmodel <- glm(log10(quantity_measure) ~ NetClass + latclass, family="gaussian", data=taxa_dt)
}
test <- broom::tidy(calibmodel) |> mutate(Taxa = taxa_list[i]) |>
dplyr::rename("NetClassSize"="term") |>
mutate(N = nrow(taxa_dt))
saveRDS(calibmodel, paste0(here::here(),"/data/rds/tow_corrected_", taxa_list[i], ".rds"))
Net_accum <- bind_rows(Net_accum, test)
}
# save filtered file
#write_csv(Net_accum,here::here("data","models","Net_calib_summary.csv"))
# Net_accum contains data for model parameters
LUT <- Net_accum |>
dplyr::select(Taxa, NetClassSize,estimate) |>
dplyr::filter(str_detect(NetClassSize, 'NetClass')) |>
# to add row with ref NetClass Size of 225 for each taxa
rbind(unique(Net_accum[c("Taxa")]) |> mutate(NetClassSize = "NetClass225", estimate = 0)) |>
dplyr::arrange(Taxa, NetClassSize)
# Add a column to the original dataset to
combdat <- left_join(datain, LUT, by=c("Taxa", "NetClassSize")) |>
mutate(quantity_measure = as.numeric(quantity_measure),
NetCalib = CalibFunct(quantity_measure, estimate))
#--------------Tow-type correction -------------------
temp <- combdat |> dplyr::filter(mesh_size2 <= 1000, NetCalib > 0) |>
dplyr::filter(haul_type %in% c("Oblique", "Vertical", "Horizontal"))
Tow_accum <- data.frame()
for (i in seq_along(taxa_list)){
taxa_dt <- temp |> dplyr::filter(Taxa==taxa_list[i])
calibmodel <- glm(log10(quantity_measure) ~ haul_type, family="gaussian", data=taxa_dt)
test <- broom::tidy(calibmodel) |> mutate(Taxa = taxa_list[i]) |>
dplyr::rename("HaulType"="term") |>
mutate(N = nrow(taxa_dt))
Tow_accum <- bind_rows(Tow_accum, test)
}
# save filtered file
#write_csv(Tow_accum,here::here("data","models","Tow_calib_summary.csv"))
LUT <- Tow_accum |> dplyr::select(Taxa, HaulType,estimate) |>
filter(str_detect(HaulType, 'haul_type')) |>
# to add row with ref NetClass Size of 225 for each taxa
rbind(unique(Tow_accum[c("Taxa")]) |> mutate(HaulType = "Type_net_haulOblique",estimate = 0)) |>
arrange(Taxa, HaulType)
combdat <- left_join(combdat, LUT, by=c("Taxa", "HaulType")) |>
mutate(NetTowCalib = CalibFunct(NetCalib, estimate.y))
#--------------Season correction -------------------
temp <- combdat |> dplyr::filter(mesh_size2 <= 1000, NetTowCalib > 0) |>
drop_na(Season)
#taxa_list <- temp |> drop_na(Taxa) |> dplyr::distinct(Taxa) |> dplyr::pull()
Season_accum <- data.frame()
for (i in seq_along(taxa_list)){
taxa_dt <- temp |> dplyr::filter(Taxa==taxa_list[i])
calibmodel <- glm(log10(quantity_measure) ~  Season, family="gaussian", data=taxa_dt)
test <- broom::tidy(calibmodel) |> mutate(Taxa = taxa_list[i]) |>
dplyr::rename("SeasonGroup"="term") |>
mutate(N = nrow(taxa_dt))
Season_accum <- bind_rows(Season_accum, test)
}
# save filtered file
#write_csv(Season_accum,here::here("data","models","Season_calib_summary.csv"))
LUT <- Season_accum |> select(Taxa, SeasonGroup, estimate) |>  filter(str_detect(SeasonGroup, 'Season')) |>
# to add row with ref NetClass Size of 225 for each taxa
rbind(unique(Season_accum[c("Taxa")]) |> mutate(SeasonGroup = "SeasonSummer",estimate = 0)) |>
arrange(Taxa, SeasonGroup)
combdat <- left_join(combdat, LUT, by=c("Taxa", "SeasonGroup")) |>
mutate(NetTowSeasonCalib = CalibFunct(NetTowCalib, estimate))
# add calibration values to the original dataset
data_calibrated <-left_join(data, combdat |>
select(id,net_calibration=NetCalib,
net_tow_calibration=NetTowCalib,
net_tow_season_calibration=NetTowSeasonCalib)) |>
dplyr::select(
id,
source_database,
data_source,
dec_lat,
dec_lon,
region,
station_name,
substation_name,
median_depth_m,
max_depth_m,
min_depth_m,
voyage_crouise,
ship_name,
haul_duration_min,
sounding_depth_m,
net_original,
net_standardized,
haul_type,
mesh_size_um,
net_area_m2,
towing_speed_knots,
volume_filtered_m3,
date_range,
day,
month,
year,
time_gmt,
local_time_range,
local_time,
day_night_twilight,
taxa_original,
aphia_id,
taxa_standardized,
taxa_extra_info,
taxonomic_rank,
lower_limit_size_cm,
upper_limit_size_cm,
mean_size_cm,
quantity_measure,
quantity_unit,
net_calibration,
net_tow_calibration,
net_tow_season_calibration,
reference,
notes,
extra_info
)
data_calibrated
saveRDS(data_calibrated, file=here::here("data/MMMDatabase_clibrated.RDS"))
write_csv(data_calibrated, file=here::here("data/MMMDatabase_clibrated.csv",na = ""))
data_calibrated <-left_join(data, combdat |> select(id,Taxa,NetClass,NetSize ,NetCalib,NetTowCalib,NetTowSeasonCalib))
create_histogram_plot <- function(taxa, data_calibrated) {
test <- subset(data_calibrated, Taxa == taxa) |>
mutate(across(c(quantity_measure, NetCalib, NetTowCalib, NetTowSeasonCalib), as.numeric)) |>
dplyr::filter(NetSize == "Meso") |>
mutate(NetClass = factor(NetClass, levels = c("50", "150", "225", "300", "400", "750"))) |>
pivot_longer(cols = c("quantity_measure", "NetCalib", "NetTowCalib", "NetTowSeasonCalib")) |>
drop_na(value) |>
mutate(name = case_when(
name == "quantity_measure" ~ "A) Raw Data",
name == "NetCalib" ~ "B) Net class corrected",
name == "NetTowCalib" ~ "C) Net class-Tow corrected",
name == "NetTowSeasonCalib" ~ "D) Net class-Tow-Season corrected"
))
ggplot(test, aes(x = value,y=NetClass, fill = NetClass)) +
scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", math_format(10^.x))) +
#ggridges::geom_density_ridges(stat="binline", bins=100) +
ggridges::geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, alpha=0.5) +
scale_fill_brewer(palette = "Dark2") +
facet_wrap(~name, ncol = 1) +
labs(title = taxa) +
theme_Publication() +
panel_border() +
theme(legend.position = "none")+
labs(x = TeX(r"(\textbf{$Abundance, ind \cdot m^{-3}$})"))
}
taxa= "Euphausiacea"
create_histogram_plot(taxa,data_calibrated)
ggsave("img/Euphausiacea.png" ,width=6, height=10, units="in", dpi=600)
taxa= "Trachymedusae"
create_histogram_plot(taxa,data_calibrated)
taxa= "Siphonophorae"
create_histogram_plot(taxa,data_calibrated)
taxa= "Ostracoda"
create_histogram_plot(taxa,data_calibrated)
taxa= "Calanoida"
create_histogram_plot(taxa,data_calibrated)
taxa= "Cyclopoida"
create_histogram_plot(taxa,data_calibrated)
taxa= "Isopoda"
create_histogram_plot(taxa,data_calibrated)
taxa= "Amphipoda"
create_histogram_plot(taxa,data_calibrated)
taxa= "Polychaeta"
create_histogram_plot(taxa,data_calibrated)
taxa= "Phragmophora"
create_histogram_plot(taxa,data_calibrated)
taxa= "Aphragmophora"
create_histogram_plot(taxa,data_calibrated)
taxa= "Echinodermata"
create_histogram_plot(taxa,data_calibrated)
taxa= "Appendicularia"
create_histogram_plot(taxa,data_calibrated)
taxa= "Mormonilloida"
create_histogram_plot(taxa,data_calibrated)
taxa= "Ctenophora"
create_histogram_plot(taxa,data_calibrated)
taxa= "Gastropoda"
create_histogram_plot(taxa,data_calibrated)
taxa= "Narcomedusae"
create_histogram_plot(taxa,data_calibrated)
taxa= "Harpacticoida"
create_histogram_plot(taxa,data_calibrated)
taxa= "Bivalvia"
create_histogram_plot(taxa,data_calibrated)
taxa= "Decapoda"
create_histogram_plot(taxa,data_calibrated)
taxa= "Thaliacea"
create_histogram_plot(taxa,data_calibrated)
taxa= "Mysida"
create_histogram_plot(taxa,data_calibrated)
taxa= "Cephalopoda"
create_histogram_plot(taxa,data_calibrated)
taxa= "Teleostei"
create_histogram_plot(taxa,data_calibrated)
print("all done")
